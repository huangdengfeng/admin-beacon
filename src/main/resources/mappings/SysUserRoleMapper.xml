<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.seezoon.domain.dao.mapper.SysUserRoleMapper">
    <resultMap id="BaseResultMap" type="com.seezoon.domain.dao.po.SysUserRolePO">
        <id column="uid" jdbcType="INTEGER" property="uid"/>
        <id column="role_id" jdbcType="INTEGER" property="roleId"/>
        <result column="create_user" jdbcType="INTEGER" property="createUser"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    </resultMap>
    <sql id="Base_Column_List">
    uid, role_id, create_user, create_time
  </sql>
    <select id="selectByPrimaryKey"
            parameterType="com.seezoon.domain.dao.po.SysUserRolePO$SysUserRoleKey"
            resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from sys_user_role
        where uid = #{uid,jdbcType=INTEGER}
        and role_id = #{roleId,jdbcType=INTEGER}
    </select>
    <select id="selectByUserId" resultType="java.lang.Integer">
        select role_id from sys_user_role where uid = #{uid,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey"
            parameterType="com.seezoon.domain.dao.po.SysUserRolePO$SysUserRoleKey">
    delete from sys_user_role
    where uid = #{uid,jdbcType=INTEGER}
      and role_id = #{roleId,jdbcType=INTEGER} limit 2
  </delete>

    <delete id="deleteByRoleId">
        delete from sys_user_role where role_id = #{roleId,jdbcType=INTEGER}
    </delete>

    <delete id="deleteByUserId">
        delete from sys_user_role where uid = #{uid}
    </delete>

    <insert id="insert" parameterType="com.seezoon.domain.dao.po.SysUserRolePO">
    insert into sys_user_role (uid, role_id, create_user, 
      create_time) values
     (#{uid,jdbcType=INTEGER}, #{roleId,jdbcType=INTEGER}, #{createUser,jdbcType=INTEGER},
      #{createTime,jdbcType=TIMESTAMP})
  </insert>
    <insert id="insertSelective" parameterType="com.seezoon.domain.dao.po.SysUserRolePO">
        insert into sys_user_role
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="uid != null">
                uid,
            </if>
            <if test="roleId != null">
                role_id,
            </if>
            <if test="createUser != null">
                create_user,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="uid != null">
                #{uid,jdbcType=INTEGER},
            </if>
            <if test="roleId != null">
                #{roleId,jdbcType=INTEGER},
            </if>
            <if test="createUser != null">
                #{createUser,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <insert id="insertBatch">
        insert into sys_user_role (uid, role_id, create_user,
        create_time) values
        <foreach item="item" collection="list" separator=",">
            (#{uid,jdbcType=INTEGER}, #{roleId,jdbcType=INTEGER}, #{createUser,jdbcType=INTEGER},
            #{createTime,jdbcType=TIMESTAMP})
        </foreach>

    </insert>

    <update id="updateByPrimaryKeySelective"
            parameterType="com.seezoon.domain.dao.po.SysUserRolePO">
        update sys_user_role
        <set>
            <if test="createUser != null">
                create_user = #{createUser,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where uid = #{uid,jdbcType=INTEGER}
        and role_id = #{roleId,jdbcType=INTEGER} limit 2
    </update>
    <update id="updateByPrimaryKey" parameterType="com.seezoon.domain.dao.po.SysUserRolePO">
    update sys_user_role
    set create_user = #{createUser,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where uid = #{uid,jdbcType=INTEGER}
      and role_id = #{roleId,jdbcType=INTEGER} limit 2
  </update>
</mapper>